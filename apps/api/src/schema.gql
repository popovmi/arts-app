# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ArtFileType {
  artId: String!
  art: Art!
  originalPath: String!
  watermarkPath: String!
  uploadedAt: Date!
}

"""Date custom scalar type"""
scalar Date

type Art {
  id: String!
  name: String!
  internal: Boolean!
  files: [ArtFileType!]
  projectId: String
  createdAt: Date
  updatedAt: Date
  bottomForm: String
  artClass: String
  form: String
  nominalVolume: String
  height: String
  productType: String
  productionMethod: String
  ringType: String
  project: Project
}

type PageData {
  count: Float!
  take: Float!
  skip: Float!
}

type ArtResponse {
  page: ArtTypeConnection!
  pageData: PageData
}

type ArtTypeConnection {
  edges: [ArtTypeEdge!]
  pageInfo: ArtTypePageInfo
}

type ArtTypeEdge {
  cursor: String
  node: Art
}

type ArtTypePageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type Project {
  id: String!
  name: String!
  internal: Boolean!
  hasDesignDoc: Boolean
  sfm: String
  dropNumber: String
  intercenter: String
  arts: [Art!]
  factoryId: String
  customerId: String
  createdAt: Date!
  updatedAt: Date!
}

type ProjectResponse {
  page: ProjectTypeConnection!
  pageData: PageData
}

type ProjectTypeConnection {
  edges: [ProjectTypeEdge!]
  pageInfo: ProjectTypePageInfo
}

type ProjectTypeEdge {
  cursor: String
  node: Project
}

type ProjectTypePageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type BaseAttributeType {
  id: Float!
  name: String!
  active: Boolean!
  valueOrder: Float!
  createdAt: Date!
  updatedAt: Date!
}

type User {
  id: String!
  username: String!
  fullName: String!
  role: String!
  active: Boolean!
  createdAt: Date!
  updatedAt: Date!
}

type UserResponse {
  page: UserTypeConnection!
  pageData: PageData
}

type UserTypeConnection {
  edges: [UserTypeEdge!]
  pageInfo: UserTypePageInfo
}

type UserTypeEdge {
  cursor: String
  node: User
}

type UserTypePageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type LoginResponse {
  user: User!
}

type Query {
  user(id: String!): User!
  users(filter: UserFilterQuery, pagination: ConnectionArgs = {}, order: UserOrderQuery): UserResponse!
  whoAmI: User!
  project(id: String!): Project!
  projects(filter: ProjectFilterQuery, pagination: ConnectionArgs = {}, order: ProjectOrderQuery): ProjectResponse!
  art(id: String!): Art!
  arts(filter: ArtFilterQuery, pagination: ConnectionArgs = {}, order: ArtOrderQuery): ArtResponse!
  getArtClass: [BaseAttributeType!]!
  getBottomForm: [BaseAttributeType!]!
  getDropNumber: [BaseAttributeType!]!
  getForm: [BaseAttributeType!]!
  getHeight: [BaseAttributeType!]!
  getIntercenter: [BaseAttributeType!]!
  getNominalVolume: [BaseAttributeType!]!
  getProductType: [BaseAttributeType!]!
  getProductionMethod: [BaseAttributeType!]!
  getRingType: [BaseAttributeType!]!
  getSfm: [BaseAttributeType!]!
}

input UserFilterQuery {
  AND: [UserFilterQuery!]
  OR: [UserFilterQuery!]
  id: StringFieldOption
  username: StringFieldOption
  fullName: StringFieldOption
  role: StringFieldOption
  active: BooleanFieldOption
}

input StringFieldOption {
  is: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  notContains: String
  startsWith: String
  notStartsWith: String
  endsWith: String
  notEndsWith: String
}

input BooleanFieldOption {
  is: Boolean
  not: Boolean
}

input ConnectionArgs {
  """Paginate before opaque cursor"""
  before: String

  """Paginate after opaque cursor"""
  after: String

  """Paginate first"""
  first: Float

  """Paginate last"""
  last: Float
}

input UserOrderQuery {
  username: OrderDirection
  fullName: OrderDirection
  active: OrderDirection
  role: OrderDirection
  id: OrderDirection
}

enum OrderDirection {
  """Ascending"""
  ASC

  """Descending"""
  DESC
}

input ProjectFilterQuery {
  AND: [ProjectFilterQuery!]
  OR: [ProjectFilterQuery!]
  id: StringFieldOption
  name: StringFieldOption
  internal: BooleanFieldOption
  hasDesignDoc: BooleanFieldOption
  dropNumber: StringFieldOption
  intercenter: StringFieldOption
  sfm: StringFieldOption
}

input ProjectOrderQuery {
  id: OrderDirection
  name: OrderDirection
  internal: OrderDirection
  hasDesignDoc: OrderDirection
  dropNumber: OrderDirection
  intercenter: OrderDirection
  sfm: OrderDirection
}

input ArtFilterQuery {
  AND: [ArtFilterQuery!]
  OR: [ArtFilterQuery!]
  id: StringFieldOption
  name: StringFieldOption
  internal: BooleanFieldOption
  projectId: StringFieldOption
  bottomForm: StringFieldOption
  artClass: StringFieldOption
  form: StringFieldOption
  nominalVolume: StringFieldOption
  height: StringFieldOption
  productType: StringFieldOption
  productionMethod: StringFieldOption
  ringType: StringFieldOption
}

input ArtOrderQuery {
  id: OrderDirection
  name: OrderDirection
  internal: OrderDirection
  projectId: OrderDirection
  bottomForm: OrderDirection
  artClass: OrderDirection
  form: OrderDirection
  nominalVolume: OrderDirection
  height: OrderDirection
  productType: OrderDirection
  productionMethod: OrderDirection
  ringType: OrderDirection
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  login(username: String!, password: String!): LoginResponse!
  logout: Boolean!
  changePassword(username: String!, password: String!, passwordRepeat: String!, newPassword: String!): Boolean!
  createProject(createProjectInput: CreateProjectInput!): Project!
  updateProject(updateProjectInput: UpdateProjectInput!): Project!
  createArt(createArtInput: CreateArtInput!): Art!
  updateArt(updateArtInput: UpdateArtInput!): Art!
  createArtClass(input: CreateAttributeInput!): BaseAttributeType!
  updateArtClassOrder(input: UpdateAttributeValueOrderInput!): [BaseAttributeType!]!
  updateArtClass(input: UpdateAttributeInput!): BaseAttributeType!
  createBottomForm(input: CreateAttributeInput!): BaseAttributeType!
  updateBottomFormOrder(input: UpdateAttributeValueOrderInput!): [BaseAttributeType!]!
  updateBottomForm(input: UpdateAttributeInput!): BaseAttributeType!
  createDropNumber(input: CreateAttributeInput!): BaseAttributeType!
  updateDropNumberOrder(input: UpdateAttributeValueOrderInput!): [BaseAttributeType!]!
  updateDropNumber(input: UpdateAttributeInput!): BaseAttributeType!
  createForm(input: CreateAttributeInput!): BaseAttributeType!
  updateFormOrder(input: UpdateAttributeValueOrderInput!): [BaseAttributeType!]!
  updateForm(input: UpdateAttributeInput!): BaseAttributeType!
  createHeight(input: CreateAttributeInput!): BaseAttributeType!
  updateHeightOrder(input: UpdateAttributeValueOrderInput!): [BaseAttributeType!]!
  updateHeight(input: UpdateAttributeInput!): BaseAttributeType!
  createIntercenter(input: CreateAttributeInput!): BaseAttributeType!
  updateIntercenterOrder(input: UpdateAttributeValueOrderInput!): [BaseAttributeType!]!
  updateIntercenter(input: UpdateAttributeInput!): BaseAttributeType!
  createNominalVolume(input: CreateAttributeInput!): BaseAttributeType!
  updateNominalVolumeOrder(input: UpdateAttributeValueOrderInput!): [BaseAttributeType!]!
  updateNominalVolume(input: UpdateAttributeInput!): BaseAttributeType!
  createProductType(input: CreateAttributeInput!): BaseAttributeType!
  updateProductTypeOrder(input: UpdateAttributeValueOrderInput!): [BaseAttributeType!]!
  updateProductType(input: UpdateAttributeInput!): BaseAttributeType!
  createProductionMethod(input: CreateAttributeInput!): BaseAttributeType!
  updateProductionMethodOrder(input: UpdateAttributeValueOrderInput!): [BaseAttributeType!]!
  updateProductionMethod(input: UpdateAttributeInput!): BaseAttributeType!
  createRingType(input: CreateAttributeInput!): BaseAttributeType!
  updateRingTypeOrder(input: UpdateAttributeValueOrderInput!): [BaseAttributeType!]!
  updateRingType(input: UpdateAttributeInput!): BaseAttributeType!
  createSfm(input: CreateAttributeInput!): BaseAttributeType!
  updateSfmOrder(input: UpdateAttributeValueOrderInput!): [BaseAttributeType!]!
  updateSfm(input: UpdateAttributeInput!): BaseAttributeType!
}

input CreateUserInput {
  username: String!
  fullName: String!
  role: Role!
  active: Boolean!
  password: String!
}

enum Role {
  """Administrator Role"""
  ADMIN

  """Simple user role"""
  USER
}

input UpdateUserInput {
  id: String!
  fullName: String
  role: Role
  active: Boolean
  password: String
}

input CreateProjectInput {
  name: String!
  internal: Boolean
  hasDesignDoc: Boolean
  dropNumber: String
  intercenter: String
  sfm: String
}

input UpdateProjectInput {
  id: String!
  name: String
  internal: Boolean
  hasDesignDoc: Boolean
  dropNumber: String
  intercenter: String
  sfm: String
}

input CreateArtInput {
  name: String!
  internal: Boolean = true
  projectId: String
  bottomForm: String
  artClass: String
  form: String
  nominalVolume: String
  height: String
  productType: String
  productionMethod: String
  ringType: String
  filePath: String!
}

input UpdateArtInput {
  id: String!
  name: String
  internal: Boolean
  projectId: String
  bottomForm: String
  artClass: String
  form: String
  nominalVolume: String
  height: String
  productType: String
  productionMethod: String
  filePath: String
  ringType: String
}

input CreateAttributeInput {
  name: String!
  active: Boolean!
}

input UpdateAttributeValueOrderInput {
  oldOrder: Float!
  newOrder: Float!
}

input UpdateAttributeInput {
  id: Float!
  name: String
  active: Boolean
}